#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('insta:server');
const http = require('http');
const server = http.createServer(app);
const { Server } = require('socket.io');
const io = new Server(server);

// Pass Socket.io instance to app (optional)
app.set('io', io);

// Get port and set to app
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Start server
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Handle Socket.io
io.on('connection', (socket) => {
  console.log('A user connected');

  socket.on('join', (roomId) => {
    socket.join(roomId);
  });

  socket.on('chat message', ({ roomId, sender, message }) => {
    io.to(roomId).emit('chat message', { sender, message });
  });

  socket.on('typing', ({ roomId, from }) => {
    socket.to(roomId).emit('typing', { from });
  });

  socket.on('stop typing', ({ roomId, from }) => {
    socket.to(roomId).emit('stop typing', { from });
  });

  socket.on('disconnect', () => {
    console.log('User disconnected');
  });
});

// Utility: normalizePort
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// Utility: onError
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

// Utility: onListening
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
